/* automatically generated by rust-bindgen 0.56.0 */
#![allow(non_camel_case_types)]
pub type syz_Handle = ::std::os::raw::c_ulonglong;
pub type syz_ErrorCode = ::std::os::raw::c_int;
pub const SYZ_LOGGING_BACKEND_SYZ_LOGGING_BACKEND_STDERR: SYZ_LOGGING_BACKEND = 0;
pub type SYZ_LOGGING_BACKEND = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " The parameter is specific to the backend:"]
    #[doc = ""]
    #[doc = " - For STDERR, ignored."]
    pub fn syz_configureLoggingBackend(
        backend: SYZ_LOGGING_BACKEND,
        param: *mut ::std::os::raw::c_void,
    ) -> syz_ErrorCode;
}
pub const SYZ_LOG_LEVEL_SYZ_LOG_LEVEL_ERROR: SYZ_LOG_LEVEL = 0;
pub const SYZ_LOG_LEVEL_SYZ_LOG_LEVEL_WARN: SYZ_LOG_LEVEL = 10;
pub const SYZ_LOG_LEVEL_SYZ_LOG_LEVEL_INFO: SYZ_LOG_LEVEL = 20;
pub const SYZ_LOG_LEVEL_SYZ_LOG_LEVEL_DEBUG: SYZ_LOG_LEVEL = 30;
pub type SYZ_LOG_LEVEL = ::std::os::raw::c_uint;
extern "C" {
    pub fn syz_setLogLevel(level: SYZ_LOG_LEVEL);
}
extern "C" {
    pub fn syz_getLastErrorCode() -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_getLastErrorMessage() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn syz_handleFree(handle: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_initialize() -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_shutdown() -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_getI(
        out: *mut ::std::os::raw::c_int,
        target: syz_Handle,
        property: ::std::os::raw::c_int,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_setI(
        target: syz_Handle,
        property: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_getD(
        out: *mut f64,
        target: syz_Handle,
        property: ::std::os::raw::c_int,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_setD(
        target: syz_Handle,
        property: ::std::os::raw::c_int,
        value: f64,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_getO(
        out: *mut syz_Handle,
        target: syz_Handle,
        property: ::std::os::raw::c_int,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_setO(
        target: syz_Handle,
        property: ::std::os::raw::c_int,
        value: syz_Handle,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_getD3(
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        target: syz_Handle,
        property: ::std::os::raw::c_int,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_setD3(
        target: syz_Handle,
        property: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        z: f64,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_getD6(
        x1: *mut f64,
        y1: *mut f64,
        z1: *mut f64,
        x2: *mut f64,
        y2: *mut f64,
        z2: *mut f64,
        target: syz_Handle,
        property: ::std::os::raw::c_int,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_setD6(
        handle: syz_Handle,
        property: ::std::os::raw::c_int,
        x1: f64,
        y1: f64,
        z1: f64,
        x2: f64,
        y2: f64,
        z2: f64,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createContext(out: *mut syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createContextHeadless(out: *mut syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_contextGetBlock(context: syz_Handle, block: *mut f32) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createStreamingGenerator(
        out: *mut syz_Handle,
        context: syz_Handle,
        protocol: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_char,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createBufferFromStream(
        out: *mut syz_Handle,
        protocol: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_char,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_bufferGetChannels(
        out: *mut ::std::os::raw::c_uint,
        buffer: syz_Handle,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_bufferGetLengthInSamples(
        out: *mut ::std::os::raw::c_uint,
        buffer: syz_Handle,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_bufferGetLengthInSeconds(out: *mut f64, buffer: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createBufferGenerator(out: *mut syz_Handle, context: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_sourceAddGenerator(source: syz_Handle, generator: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_sourceRemoveGenerator(source: syz_Handle, generator: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createDirectSource(out: *mut syz_Handle, context: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createPannedSource(out: *mut syz_Handle, context: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createSource3D(out: *mut syz_Handle, context: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createNoiseGenerator(
        out: *mut syz_Handle,
        context: syz_Handle,
        channels: ::std::os::raw::c_uint,
    ) -> syz_ErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syz_RouteConfig {
    pub gain: f32,
    pub fade_time: f32,
}
#[test]
fn bindgen_test_layout_syz_RouteConfig() {
    assert_eq!(
        ::std::mem::size_of::<syz_RouteConfig>(),
        8usize,
        concat!("Size of: ", stringify!(syz_RouteConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<syz_RouteConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(syz_RouteConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<syz_RouteConfig>())).gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syz_RouteConfig),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<syz_RouteConfig>())).fade_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(syz_RouteConfig),
            "::",
            stringify!(fade_time)
        )
    );
}
extern "C" {
    pub fn syz_routingConfigRoute(
        context: syz_Handle,
        output: syz_Handle,
        input: syz_Handle,
        config: *mut syz_RouteConfig,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_routingRemoveRoute(
        context: syz_Handle,
        output: syz_Handle,
        input: syz_Handle,
        fade_out: f32,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_effectReset(effect: syz_Handle) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createGlobalEcho(out: *mut syz_Handle, context: syz_Handle) -> syz_ErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syz_EchoTapConfig {
    pub delay: f32,
    pub gain_l: f32,
    pub gain_r: f32,
}
#[test]
fn bindgen_test_layout_syz_EchoTapConfig() {
    assert_eq!(
        ::std::mem::size_of::<syz_EchoTapConfig>(),
        12usize,
        concat!("Size of: ", stringify!(syz_EchoTapConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<syz_EchoTapConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(syz_EchoTapConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<syz_EchoTapConfig>())).delay as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syz_EchoTapConfig),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<syz_EchoTapConfig>())).gain_l as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(syz_EchoTapConfig),
            "::",
            stringify!(gain_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<syz_EchoTapConfig>())).gain_r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syz_EchoTapConfig),
            "::",
            stringify!(gain_r)
        )
    );
}
extern "C" {
    pub fn syz_echoSetTaps(
        handle: syz_Handle,
        n_taps: ::std::os::raw::c_uint,
        taps: *mut syz_EchoTapConfig,
    ) -> syz_ErrorCode;
}
extern "C" {
    pub fn syz_createGlobalFdnReverb(out: *mut syz_Handle, context: syz_Handle) -> syz_ErrorCode;
}
pub const SYZ_PANNER_STRATEGY_SYZ_PANNER_STRATEGY_HRTF: SYZ_PANNER_STRATEGY = 0;
pub const SYZ_PANNER_STRATEGY_SYZ_PANNER_STRATEGY_STEREO: SYZ_PANNER_STRATEGY = 1;
pub const SYZ_PANNER_STRATEGY_SYZ_PANNER_STRATEGY_COUNT: SYZ_PANNER_STRATEGY = 2;
pub type SYZ_PANNER_STRATEGY = ::std::os::raw::c_uint;
pub const SYZ_DISTANCE_MODEL_SYZ_DISTANCE_MODEL_NONE: SYZ_DISTANCE_MODEL = 0;
pub const SYZ_DISTANCE_MODEL_SYZ_DISTANCE_MODEL_LINEAR: SYZ_DISTANCE_MODEL = 1;
pub const SYZ_DISTANCE_MODEL_SYZ_DISTANCE_MODEL_EXPONENTIAL: SYZ_DISTANCE_MODEL = 2;
pub const SYZ_DISTANCE_MODEL_SYZ_DISTANCE_MODEL_INVERSE: SYZ_DISTANCE_MODEL = 3;
pub const SYZ_DISTANCE_MODEL_SYZ_DISTANCE_MODEL_COUNT: SYZ_DISTANCE_MODEL = 4;
pub type SYZ_DISTANCE_MODEL = ::std::os::raw::c_uint;
pub const SYZ_NOISE_TYPE_SYZ_NOISE_TYPE_UNIFORM: SYZ_NOISE_TYPE = 0;
pub const SYZ_NOISE_TYPE_SYZ_NOISE_TYPE_VM: SYZ_NOISE_TYPE = 1;
pub const SYZ_NOISE_TYPE_SYZ_NOISE_TYPE_FILTERED_BROWN: SYZ_NOISE_TYPE = 2;
pub const SYZ_NOISE_TYPE_SYZ_NOISE_TYPE_COUNT: SYZ_NOISE_TYPE = 3;
pub type SYZ_NOISE_TYPE = ::std::os::raw::c_uint;
pub const SYZ_PROPERTIES_SYZ_P_AZIMUTH: SYZ_PROPERTIES = 0;
pub const SYZ_PROPERTIES_SYZ_P_BUFFER: SYZ_PROPERTIES = 1;
pub const SYZ_PROPERTIES_SYZ_P_CLOSENESS_BOOST: SYZ_PROPERTIES = 2;
pub const SYZ_PROPERTIES_SYZ_P_CLOSENESS_BOOST_DISTANCE: SYZ_PROPERTIES = 3;
pub const SYZ_PROPERTIES_SYZ_P_DISTANCE_MAX: SYZ_PROPERTIES = 4;
pub const SYZ_PROPERTIES_SYZ_P_DISTANCE_MODEL: SYZ_PROPERTIES = 5;
pub const SYZ_PROPERTIES_SYZ_P_DISTANCE_REF: SYZ_PROPERTIES = 6;
pub const SYZ_PROPERTIES_SYZ_P_ELEVATION: SYZ_PROPERTIES = 7;
pub const SYZ_PROPERTIES_SYZ_P_GAIN: SYZ_PROPERTIES = 8;
pub const SYZ_PROPERTIES_SYZ_P_PANNER_STRATEGY: SYZ_PROPERTIES = 9;
pub const SYZ_PROPERTIES_SYZ_P_PANNING_SCALAR: SYZ_PROPERTIES = 10;
pub const SYZ_PROPERTIES_SYZ_P_POSITION: SYZ_PROPERTIES = 11;
pub const SYZ_PROPERTIES_SYZ_P_ORIENTATION: SYZ_PROPERTIES = 12;
pub const SYZ_PROPERTIES_SYZ_P_ROLLOFF: SYZ_PROPERTIES = 13;
pub const SYZ_PROPERTIES_SYZ_P_LOOPING: SYZ_PROPERTIES = 14;
pub const SYZ_PROPERTIES_SYZ_P_NOISE_TYPE: SYZ_PROPERTIES = 15;
pub const SYZ_PROPERTIES_SYZ_P_PITCH_BEND: SYZ_PROPERTIES = 16;
pub const SYZ_PROPERTIES_SYZ_P_INPUT_FILTER_ENABLED: SYZ_PROPERTIES = 17;
pub const SYZ_PROPERTIES_SYZ_P_INPUT_FILTER_CUTOFF: SYZ_PROPERTIES = 18;
pub const SYZ_PROPERTIES_SYZ_P_MEAN_FREE_PATH: SYZ_PROPERTIES = 19;
pub const SYZ_PROPERTIES_SYZ_P_T60: SYZ_PROPERTIES = 20;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_LF_ROLLOFF: SYZ_PROPERTIES = 21;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_LF_REFERENCE: SYZ_PROPERTIES = 22;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_HF_ROLLOFF: SYZ_PROPERTIES = 23;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_HF_REFERENCE: SYZ_PROPERTIES = 24;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_DIFFUSION: SYZ_PROPERTIES = 25;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_MODULATION_DEPTH: SYZ_PROPERTIES = 26;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_MODULATION_FREQUENCY: SYZ_PROPERTIES = 27;
pub const SYZ_PROPERTIES_SYZ_P_LATE_REFLECTIONS_DELAY: SYZ_PROPERTIES = 28;
pub type SYZ_PROPERTIES = ::std::os::raw::c_uint;
